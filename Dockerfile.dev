# Use the rust build image from docker as our base
# renovate-automation: rustc version
FROM rust:1.76 AS build

# Set our working directory for the build
WORKDIR /usr/src/router

# Update our build image and install required packages
RUN apt-get update
RUN apt-get -y install \
    npm \
    protobuf-compiler \
    cmake

# Add rustfmt since build requires it
RUN rustup component add rustfmt

# Cache dependencies
COPY Cargo.toml ./Cargo.toml
COPY xtask ./xtask/
RUN cargo fetch

# Copy the router source to our build environment
COPY . .

# Build and install the custom binary
RUN cargo build --profile dev

# Make directories for config and schema
RUN mkdir -p /dist/config && \
    mkdir /dist/schema && \
    mv target/debug/router /dist && \
    mv target/debug/helper /dist && \
    mv start.sh /dist

# Copy configuration and schema for docker image
COPY router.yaml /dist/config.yaml
COPY supergraph-schema.graphql /dist/schema.graphql

FROM debian:bookworm-slim

RUN apt-get update
RUN apt-get -y install \
    ca-certificates \
    procps net-tools curl vim nano htop lsof iputils-ping iputils-tracepath

# Set labels for our image
LABEL org.opencontainers.image.authors="Apollo Graph, Inc. https://github.com/apollographql/router"
LABEL org.opencontainers.image.source="https://github.com/apollographql/router"

# Copy in the required files from our build image
COPY --from=build /dist /dist

WORKDIR /dist

# Make sure we can run the router
RUN chmod 777 /dist/router
RUN chmod 777 /dist/helper
RUN chmod 777 /dist/start.sh
RUN chmod 777 /dist/schema.graphql
RUN chmod 777 /dist/config.yaml

# Default executable is the router
ENTRYPOINT ["/dist/start.sh"]
